import type { Context, MiddlewareHandler, Env, ValidationTargets } from 'hono';
import type { z } from 'zod';
import type { ZodError } from 'zod';
type Hook<T, E extends Env, P extends string> = (result: {
    success: true;
    data: T;
} | {
    success: false;
    error: ZodError;
}, c: Context<E, P>) => Response | Promise<Response> | void;
export declare const zValidator: <T extends z.ZodType<any, z.ZodTypeDef, any>, Target extends keyof ValidationTargets, E extends Env, P extends string, V extends {
    in: { [K in Target]: z.input<T>; };
    out: { [K_1 in Target]: z.output<T>; };
} = {
    in: { [K_2 in Target]: z.input<T>; };
    out: { [K_3 in Target]: z.output<T>; };
}>(target: Target, schema: T, hook?: Hook<z.TypeOf<T>, E, P> | undefined) => MiddlewareHandler<E, P, V>;
export {};
