// src/utils/url.ts
var splitPath = (path) => {
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
};
var splitRoutingPath = (path) => {
  const groups = [];
  for (let i = 0; ; ) {
    let replaced = false;
    path = path.replace(/\{[^}]+\}/g, (m) => {
      const mark = `@\\${i}`;
      groups[i] = [mark, m];
      i++;
      replaced = true;
      return mark;
    });
    if (!replaced) {
      break;
    }
  }
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  for (let i = groups.length - 1; i >= 0; i--) {
    const [mark] = groups[i];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].indexOf(mark) !== -1) {
        paths[j] = paths[j].replace(mark, groups[i][1]);
        break;
      }
    }
  }
  return paths;
};
var patternCache = {};
var getPattern = (label) => {
  if (label === "*") {
    return "*";
  }
  const match = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match) {
    if (!patternCache[label]) {
      if (match[2]) {
        patternCache[label] = [label, match[1], new RegExp("^" + match[2] + "$")];
      } else {
        patternCache[label] = [label, match[1], true];
      }
    }
    return patternCache[label];
  }
  return null;
};
var getPathFromURL = (url, strict = true) => {
  const queryIndex = url.indexOf("?", 8);
  const result = url.substring(url.indexOf("/", 8), queryIndex === -1 ? url.length : queryIndex);
  if (strict === false && result.endsWith("/")) {
    return result.slice(0, -1);
  }
  return result;
};
var getQueryStringFromURL = (url) => {
  const queryIndex = url.indexOf("?", 8);
  const result = queryIndex !== -1 ? url.slice(queryIndex + 1) : "";
  return result;
};
var mergePath = (...paths) => {
  let p = "";
  let endsWithSlash = false;
  for (let path of paths) {
    if (p.endsWith("/")) {
      p = p.slice(0, -1);
      endsWithSlash = true;
    }
    if (!path.startsWith("/")) {
      path = `/${path}`;
    }
    if (path === "/" && endsWithSlash) {
      p = `${p}/`;
    } else if (path !== "/") {
      p = `${p}${path}`;
    }
    if (path === "/" && p === "") {
      p = "/";
    }
  }
  return p;
};
var checkOptionalParameter = (path) => {
  const match = path.match(/^(.+|)(\/\:[^\/]+)\?$/);
  if (!match)
    return null;
  const base = match[1];
  const optional = base + match[2];
  return [base === "" ? "/" : base.replace(/\/$/, ""), optional];
};
var getQueryParam = (queryString, key) => {
  const results = {};
  while (true) {
    const andIndex = queryString.indexOf("&");
    let strings = "";
    if (andIndex === -1) {
      strings = queryString;
    } else {
      strings = queryString.substring(0, andIndex);
    }
    const eqIndex = strings.indexOf("=");
    if (eqIndex !== -1) {
      const v = strings.substring(eqIndex + 1);
      const k = strings.substring(0, eqIndex);
      if (key === k) {
        return /\%/.test(v) ? decodeURI(v) : v;
      } else {
        results[k] || (results[k] = v);
      }
    } else if (strings === key) {
      return "";
    }
    if (andIndex === -1)
      break;
    queryString = queryString.substring(andIndex + 1, queryString.length);
  }
  if (key)
    return null;
  return results;
};
var getQueryParams = (queryString, key) => {
  const results = {};
  for (const strings of queryString.split("&")) {
    let [k, v] = strings.split("=");
    if (v === void 0)
      v = "";
    results[k] || (results[k] = []);
    results[k].push(v.indexOf("%") !== -1 ? decodeURI(v) : v);
  }
  if (key)
    return results[key] ? results[key] : null;
  return results;
};
export {
  checkOptionalParameter,
  getPathFromURL,
  getPattern,
  getQueryParam,
  getQueryParams,
  getQueryStringFromURL,
  mergePath,
  splitPath,
  splitRoutingPath
};
